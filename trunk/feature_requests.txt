Game Features:
-Level editor
 -make square configs and sensor configs editable
 -make level selection list (with add button)
 -make level properties editor
 -make robot selection list (with add button)
 -make robot properties editor
 -make switch selection list (with add button)
 -make switch properties editor
 -make label editor and hook into switch and robot properties
 -implement a GUI resource manager (for adding and removing files in the project) and do away with project directories
 -add a version attribute to top-level elements and autobackup old versions
 -effect for the "cursor" box to fade in and out and change colours and stuff
-Batteries
-Radio Communication between robots
-init sound manager sound set from config file
-Make sound manager available to onEnter/onExit scripts
-Make ghosts work in levels with switches that do fancy stuff (need a separate beanshell context per set of ghosts, and even separate playfields)
-Make all exceptions (even on the game loop thread) become user-visible dialogs
-Be able to group and label sets of gates
-Be able to shrink groups of gates into small ICs
-Split LevelConfig and Level, where LevelConfig doesn't change and Level does. (?)
-Consider splitting the Gate interface into Gate (model) and GateComponent (view/controller)

Images:
-Smaller robot sprite and/or larger tiles?
-Start/Pause/Single Step/Reset buttons
-Images for different floor textures
-Different floor patterns in various colours

Sounds:
-When game is running
 -AND/OR/NOT gate goes on/off
 -robot steps up/down/left/right
 -robot is confused about which direction to step
-Circuit Editor
 -"you suck" sound (for trying to delete undeletable stuff)
 -entering a connectable region while dragging a wire
 -exiting a connectable region while dragging a wire
 -removing a wire
 -deleting all gates at once (clearing the circuit out)
-music for circuit editor and running game
-little ditties for the beginning of each level (maybe this would be better suited to the MIDI sequencer api)

Completed:
-Level Editor:
 -implement the "project" paradigm
 -save and load
-user-controllable label positioning for switches and grods (n, ne, e, se, s, sw, w, nw)
-simpler robot and switch repositioning (via setX/getX and setY/getY)
-make location vs. position consistent throughout (standardise on position)
-allow map manipulation from switches
-allow switches to enable/disable other switches
-make it possible to start a switch in the disabled state (config file)
-Be able to specify how many circuit evaluations per step in a level
-Fix bug where there are multiple async repaint threads running after switching levels
-disallow multiple switches and/or robots to share the same name
-XML format for level config (ok, I'll cry uncle)
-Make gates their proper size when saved and loaded in a circuit file
-fix security problem (loading a circuit when editor is locked!)
-figure out why the wrong inputs and outputs turn blue when hovered over (and orange when activated)
-Fade the labels in and out instead of abrupt appearance/disappearance
-Let the user choose how big a gate looks on screen
-Fix "clear" feature in circuit editor to give back gate allowances!
-Make zoom effect also apply to input stick length and output stick length
-Make gates zoom back to their toolbox spot when deleted
-Animated sprites for anything that can use a static image
-Make labels disappear when the game starts (and reappear when it stops)
-moved sprite classes into their own package
-reset score when level resets, but accumulate scores across levels!
-drag a new gate off its toolbox icon to create it, and delete by putting it back into the toolbox.
-fix the problem that circuits don't reset properly (some inputs/outputs stay active)
-Make load/save circuits and ghosts work with multiple robots per level
-make input and output stick lengths part of the gate interface
-Pull out the gate input/output locating code to the Gate interface
-make little gate icons in the circuit editors that show remaining allowance
-Pull out the gate drawing code to the Gate interface
-Gate allowances
 -Split Circuit class out of CircuitEditor, and give an instance of it to the Robot. (Circuit will include gate allowances)
  *create event publisher interface for Circuit class, and use it to know when to repaint CircuitEditor
-Score keeping (based on switches that modify the score)
-Fix accelerator key for adding gates (was getting the wrong Keystrokes)
-Create a snapshot/restore facility for LevelConfig (so the level state can be reset after the switches have had at it)
-Make an effort not to stack circuit editor windows on top of each other
-Good debug messages for runtime eval errors on switches
-Show labels on robots and switches when game is in "not started" state
-Specify sprite image scale factor in config file
-Goodies to pick up along the way or numbered checkpoints
-Secondary colour tiles (CMY) that detect as 2 colours at once (white would become all 3)
-NAND and NOR gates (and buffers?)
-Make loading levels and circuits more fault-tolerant and provide specific error messages
-Figure out why grod appears in wrong spot when level first starts
-Remember preferences: window location, load and save dialog paths
-Load multiple "ghost" robots and circuits so you can compare solutions
-Make the game actually exit when you quit on Windows/X11
-Put in the number of steps counter on the play field
-Use files to load and save circuits
-Fix single-step
-Clear old gates when loading circuit
-Button for clearing circuit editor
-Fix the "You Win!!" message (incl. when single-stepping into the cake)
-Fix reset when game is running
-another reworking of the start/pause/step/reset UI
-Single-step button for debugging (and redo interface with Start/Pause/Single Step/Reset)
-Lock circuit editor when game is running (unlock after reset)
-Be able to load new levels from a chosen file
-Multi-frame robot sprite

Dismissed/Changed/Bad Ideas:
-Different floor textures that the robot can detect (metal, carpet, dirt, tile, ...)
-Random gate delays in "hard" mode
